#version 130

uniform sampler2DArray TileTextures;

struct light
{
    vec4 color;
    vec2 position;
    float radius;
    bool enable;
};

#define MaxLights 8

uniform light[MaxLights] Lights;

uniform float AmbientIntensity;
uniform vec4 AmbientColor;

in vec4 gl_FragCoord;

in vec2 psTexcoord;
flat in uint psTileIndex;
in vec2 psPosition;

out vec4 outColor;


void main()
{
	vec4 texColor = texture(TileTextures,vec3(psTexcoord,psTileIndex));
	
	
	vec4 IAmbient = texColor * AmbientColor * AmbientIntensity;
	IAmbient = vec4(IAmbient.rgb,texColor.a);
	
	outColor = IAmbient;
	
	for(int i = 0; i < MaxLights; i++)
	{
	    light cLight = Lights[i];
        if(cLight.enable )
        {
            vec2 distVec =  cLight.position - psPosition.xy;
            float dist = dot(distVec,distVec);
            	
            dist = 1 - clamp(dist /cLight.radius,0,1); 
            	
            vec4 ILight = texColor * vec4(vec3(dist) * cLight.color.rgb,1);
            
            outColor += ILight;
        }
	}
	
	
	outColor = clamp(outColor,0,1);
}
